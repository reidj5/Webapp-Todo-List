{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","ToDoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","TodoList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAyDeA,MAvDf,SAAkBC,GAChB,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAACC,GACpBP,EAASO,EAAEC,OAAOV,QAapB,OACE,sBAAMW,UAAU,YAAYC,SAXT,SAACH,GACpBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACbE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGRC,EAAS,KAGT,SACGL,EAAME,KACL,qCACE,uBACEoB,KAAK,OACLC,YAAY,eACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAEP,wBAAQQ,UAAU,mBAAlB,uBAGF,qCACE,uBACEQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAEP,wBAAQQ,UAAU,cAAlB,6B,sBCJKa,MAzCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAE5C,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACIrB,UAAWoB,EAAKE,WAAa,oBAAsB,WADvD,UAII,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACIuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEd,cAAC,IAAD,CACIuB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACjDP,UAAU,mBAZbqB,OC4BFG,MAnDf,WACI,MAA0BrC,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcW,EAAd,KAoCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SArCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OA+BL,cAAC,EAAD,CACIb,MAAOA,EACPC,aAhBS,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAUDZ,WAvBO,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KACxDsB,EAASI,IAsBDZ,WAhCO,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCR5DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACI,cAACoC,EAAD,OCHRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dd50a267.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Update To-Do\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"todo-input edit\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n          <button className=\"todo-button edit\">Update</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add a todo\"\r\n            value={input}\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            onChange={handleChange}\r\n            ref={inputRef}\r\n          />\r\n          <button className=\"todo-button\">Add To Do</button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div \r\n            className={todo.isComplete ? 'todo-row-complete' : 'todo-row'} \r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine \r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className=\"delete-icon\"\r\n                />\r\n                <TiEdit \r\n                    onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n                    className=\"edit-icon\"\r\n                />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction ToDoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos)\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue)=> {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n        setTodos(removeArr)\r\n\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the plan for today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo \r\n                todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList\r\n","import React from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n        <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}